service: cosmos-projects-api

# Use the serverless-webpack plugin to transpile ES6
plugins:
    - serverless-webpack
    - serverless-offline

custom:
    # Our stage is based on what is passed in when running serverless
    # commands. Or fallsback to what we have set in the provider section.
    stage: ${opt:stage, self:provider.stage}
    # Set the table name here so we can use it while testing locally
    projectsTableName: ${self:custom.stage}-cosmos-projects
    # Set our DynamoDB throughput for prod and all other non-prod stages.
    tableThroughputs:
        prod: 5
        default: 1
    tableThroughput: ${self:custom.tableThroughputs.${self:custom.stage}, self:custom.tableThroughputs.default}
    # Load our webpack config
    webpack:
        webpackConfig: ../webpack.config.js
        includeModules: true

provider:
    name: aws
    runtime: nodejs8.10
    stage: dev
    region: us-east-1

    # These environment variables are made available to our functions
    # under process.env.
    environment:
        projectsTableName: ${self:custom.projectsTableName}

    iamRoleStatements:
    - Effect: Allow
      Action:
          - dynamodb:DescribeTable
          - dynamodb:Query
          - dynamodb:Scan
          - dynamodb:GetItem
          - dynamodb:PutItem
          - dynamodb:UpdateItem
          - dynamodb:DeleteItem
          # Restrict our IAM role permissions to
          # the specific table for the stage
      Resource:
          - "Fn::GetAtt": [ ProjectsTable, Arn ]

functions:
    create:
        handler: create.main
        events:
            - http:
                  path: projects
                  method: post
                  cors: true
                  authorizer: aws_iam
    get:
        handler: get.main
        events:
            - http:
                  path: projects/{project}
                  method: get
                  cors: true
                  authorizer: aws_iam
    list:
        handler: list.main
        events:
            - http:
                  path: projects
                  method: get
                  cors: true
                  authorizer: aws_iam
    update:
        handler: update.main
        events:
            - http:
                  path: projects/{project}
                  method: put
                  cors: true
                  authorizer: aws_iam
    delete:
        handler: delete.main
        events:
            - http:
                  path: projects/{project}
                  method: delete
                  cors: true
                  authorizer: aws_iam
resources:
    # API Gateway Errors
    - ${file(../resources/api-gateway-errors.yml)}
    # S3
    - ${file(../resources/s3-bucket.yml)}
    # Cognito
    - ${file(../resources/cognito-user-pool.yml)}
    - ${file(../resources/cognito-identity-pool.yml)}
    # DynamoDB
    - Resources:
        ProjectsTable:
            Type: AWS::DynamoDB::Table
            Properties:
                TableName: ${self:custom.projectsTableName}
                AttributeDefinitions:
                    - AttributeName: userId
                      AttributeType: S
                    - AttributeName: project
                      AttributeType: S
                KeySchema:
                    - AttributeName: userId
                      KeyType: HASH
                    - AttributeName: project
                      KeyType: RANGE
                ProvisionedThroughput:
                    ReadCapacityUnits: ${self:custom.tableThroughput}
                    WriteCapacityUnits: ${self:custom.tableThroughput}