service: cosmos-api

# Use the serverless-webpack plugin to transpile ES6
plugins:
    - serverless-webpack
    - serverless-offline

custom:
    # Our stage is based on what is passed in when running serverless
    # commands. Or fallsback to what we have set in the provider section.
    stage: ${opt:stage, self:provider.stage}
    # Set the table name here so we can use it while testing locally
    attemptsTableName: ${self:custom.stage}-cosmos-attempts
    usersTableName: ${self:custom.stage}-cosmos-users-datathon
    projectsTableName: ${self:custom.stage}-cosmos-projects
    # Set our DynamoDB throughput for prod and all other non-prod stages.
    tableThroughputs:
        prod: 5
        default: 1
    tableThroughput: ${self:custom.tableThroughputs.${self:custom.stage}, self:custom.tableThroughputs.default}
    # Load our webpack config
    webpack:
        webpackConfig: ./webpack.config.js
        includeModules: true

provider:
    name: aws
    runtime: nodejs8.10
    stage: dev
    region: us-east-1

    # These environment variables are made available to our functions
    # under process.env.
    environment:
        attemptsTableName: ${self:custom.attemptsTableName}
        usersTableName: ${self:custom.usersTableName}
        projectsTableName: ${self:custom.projectsTableName}

    iamRoleStatements:
    - Effect: Allow
      Action:
          - dynamodb:DescribeTable
          - dynamodb:Query
          - dynamodb:Scan
          - dynamodb:GetItem
          - dynamodb:PutItem
          - dynamodb:UpdateItem
          - dynamodb:DeleteItem
          # Restrict our IAM role permissions to
          # the specific table for the stage
      Resource:
          - "Fn::GetAtt": [ AttemptsTable, Arn ]
          - "Fn::GetAtt": [ ProjectsTable, Arn ]
          - "Fn::GetAtt": [ UsersTable, Arn ]

functions:
    # ----------- ATTEMPTS ENDPOINTS -----------
    createAttempt:
        # Defines an HTTP API endpoint that calls the main function in createAttempt.js
        # - path: url path is /attempts
        # - method: POST request
        # - cors: enabled CORS (Cross-Origin Resource Sharing) for browser cross
        #     domain api call
        # - authorizer: authenticate using the AWS IAM role
        handler: lambdas/attempt/createAttempt.main
        events:
            - http:
                  path: attempts
                  method: post
                  cors: true
                  authorizer: aws_iam
    getAttempt:
        # Defines an HTTP API endpoint that calls the main function in getAttempt.js
        # - path: url path is /attempts/{id}
        # - method: GET request
        handler: lambdas/attempt/getAttempt.main
        events:
            - http:
                  path: attempts/{id}
                  method: get
                  cors: true
                  authorizer: aws_iam
    listAttempts:
        # Defines an HTTP API endpoint that calls the main function in listAttempt.js
        # - path: url path is /attempts
        # - method: GET request
        handler: lambdas/attempt/listAttempts.main
        events:
            - http:
                  path: attempts
                  method: get
                  cors: true
                  authorizer: aws_iam
    updateAttempt:
        # Defines an HTTP API endpoint that calls the main function in updateAttempt.js
        # - path: url path is /attempts/{id}
        # - method: PUT request
        handler: lambdas/attempt/updateAttempt.main
        events:
            - http:
                  path: attempts/{id}
                  method: put
                  cors: true
                  authorizer: aws_iam
    deleteAttempt:
        # Defines an HTTP API endpoint that calls the main function in deleteAttempt.js
        # - path: url path is /attempts/{id}
        # - method: DELETE request
        handler: lambdas/attempt/deleteAttempt.main
        events:
            - http:
                  path: attempts/{id}
                  method: delete
                  cors: true
                  authorizer: aws_iam

    # ----------- USERS ENDPOINTS -----------
    createUser:
        # Defines an HTTP API endpoint that calls the main function in createUser.js
        # - path: url path is /users
        # - method: POST request
        handler: lambdas/users/createUser.main
        events:
            - http:
                  path: /users
                  method: post
                  cors: true
                  authorizer: aws_iam

resources:
    # API Gateway Errors
    - ${file(resources/api-gateway-errors.yml)}
    # DynamoDB
    - ${file(resources/dynamodb-table.yml)}
    # S3
    - ${file(resources/s3-bucket.yml)}
    # Cognito
    - ${file(resources/cognito-user-pool.yml)}
    - ${file(resources/cognito-identity-pool.yml)}
