service: cosmos-api

# Use the serverless-webpack plugin to transpile ES6
plugins:
    - serverless-webpack
    - serverless-offline

# serverless-webpack configuration
# Enable auto-packing of external modules
custom:
    webpack:
        webpackConfig: ./webpack.config.js
        includeModules: true

provider:
    name: aws
    runtime: nodejs8.10
    stage: prod
    region: us-east-1

    # 'iamRoleStatements' defines the permission policy for the Lambda function.
    # In this case Lambda functions are granted with permissions to access DynamoDB.
    iamRoleStatements:
        - Effect: Allow
          Action:
              - dynamodb:DescribeTable
              - dynamodb:Query
              - dynamodb:Scan
              - dynamodb:GetItem
              - dynamodb:PutItem
              - dynamodb:UpdateItem
              - dynamodb:DeleteItem
          Resource: 'arn:aws:dynamodb:us-east-1:*:*'

functions:
    # Defines an HTTP API endpoint that calls the main function in createAttempt.js
    # - path: url path is /attempts
    # - method: POST request
    # - cors: enabled CORS (Cross-Origin Resource Sharing) for browser cross
    #     domain api call
    # - authorizer: authenticate using the AWS IAM role
    create:
        handler: lambdas/attempt/createAttempt.main
        events:
            - http:
                  path: attempts
                  method: post
                  cors: true
                  authorizer: aws_iam
    get:
        # Defines an HTTP API endpoint that calls the main function in getAttempt.js
        # - path: url path is /attempts/{id}
        # - method: GET request
        handler: lambdas/attempt/getAttempt.main
        events:
            - http:
                  path: attempts/{id}
                  method: get
                  cors: true
                  authorizer: aws_iam
    list:
        # Defines an HTTP API endpoint that calls the main function in listAttempt.js
        # - path: url path is /attempts
        # - method: GET request
        handler: lambdas/attempt/listAttempts.main
        events:
            - http:
                  path: attempts
                  method: get
                  cors: true
                  authorizer: aws_iam
    update:
        # Defines an HTTP API endpoint that calls the main function in updateAttempt.js
        # - path: url path is /attempts/{id}
        # - method: PUT request
        handler: lambdas/attempt/updateAttempt.main
        events:
            - http:
                  path: attempts/{id}
                  method: put
                  cors: true
                  authorizer: aws_iam
    delete:
        # Defines an HTTP API endpoint that calls the main function in deleteAttempt.js
        # - path: url path is /attempts/{id}
        # - method: DELETE request
        handler: lambdas/attempt/deleteAttempt.main
        events:
            - http:
                  path: attempts/{id}
                  method: delete
                  cors: true
                  authorizer: aws_iam
resources:
    # API Gateway Errors
    - ${file(resources/api-gateway-errors.yml)}
